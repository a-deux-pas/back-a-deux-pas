name: back-a-deux-pas CI
# Triggers the workflow on push or pull request
on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  maven:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ vars.APP_NAME }}
    # export APP_VERSION to other jobs
    outputs:
      APP_VERSION: ${{ steps.set_app_version.outputs.APP_VERSION }}
    strategy:
      matrix:
        java: ["21"]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Use a pre-defined action called 'checkout' to retrieve the source code from the repository
      - name: Checkout
        uses: actions/checkout@master
      # Configure the Java environment and enable Maven caching to accelerate subsequent build executions
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven
      # Get application version from pom.xml to variable
      - name: Retrieve Application Version
        id: set_app_version
        run: |
          echo "APP_VERSION=$(mvn -f pom.xml help:evaluate -Dexpression='project.version' -q -DforceStdout)" >> $GITHUB_ENV
          echo "APP_VERSION=$(mvn -f pom.xml help:evaluate -Dexpression='project.version' -q -DforceStdout)" >> $GITHUB_OUTPUT
      - name: Print Maven POM project version
        run: echo "application version = ${{ env.APP_VERSION }}"
      # Project compilation
      - name: Compile Code Source
        run: mvn -B clean compile
      # Execution of unit tests
      - name: Run Unit Tests
        run: mvn -B test
      # Package application
      - name: Package Application
        run: mvn -B package -Dmaven.test.skip=true
      # Upload artifact to repository
      - name: Upload Application Package
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}.jar
          path: ${{ github.workspace }}/target/${{ env.APP_NAME }}-${{ env.APP_VERSION }}.jar
          compression-level: 0
          overwrite: true
  docker:
    #if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
    needs: maven
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ vars.APP_NAME }}
      APP_VERSION: ${{ needs.maven.outputs.APP_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Download Application Package
        uses: actions/download-artifact@master
        with:
          name: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}.jar
          path: target/
      - name: Display structure of downloaded files
        run: ls -l target/ ${{ github.workspace }}/
      # Build docker image and push to docker hub
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
      # Docker login
      - name: Login to Docker Hub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # Docker build and push
      - name: Build and push
        uses: docker/build-push-action@master
        with:
          context: ${{ github.workspace }}
          file: ${{ github.workspace }}/Dockerfile
          push: true
          tags: douniabed/${{ env.APP_NAME }}:${{ env.APP_VERSION }}
          build-args: APP_NAME=${{ env.APP_NAME }}, APP_VERSION=${{ env.APP_VERSION }}
