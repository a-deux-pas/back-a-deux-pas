name: back-a-deux-pas CI
# Triggers the workflow on push or pull request
on:
  push:
    branches:
      - "dev"
      - "main"
  pull_request:
    branches:
      - "**"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  maven:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ vars.APP_NAME }}
    # export APP_VERSION to other jobs
    outputs:
      APP_VERSION: ${{ steps.set_app_version.outputs.APP_VERSION }}
    strategy:
      matrix:
        java: ["21"]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Use a pre-defined action called 'checkout' to retrieve the source code from the repository
      - name: Checkout
        uses: actions/checkout@master
      # Configure the Java environment and enable Maven caching to accelerate subsequent build executions
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven
          server-id: github
      # Get application version from pom.xml to variable
      - name: Retrieve Application Version
        id: set_app_version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            COMMIT_SHA=$(git rev-parse --short HEAD)
            echo "APP_VERSION=$(mvn -f pom.xml help:evaluate -Dexpression='project.version' -q -DforceStdout)-${COMMIT_SHA}" >> $GITHUB_ENV
            echo "APP_VERSION=$(mvn -f pom.xml help:evaluate -Dexpression='project.version' -q -DforceStdout)-${COMMIT_SHA}" >> $GITHUB_OUTPUT
          else
            echo "APP_VERSION=$(mvn -f pom.xml help:evaluate -Dexpression='project.version' -q -DforceStdout)" >> $GITHUB_ENV
            echo "APP_VERSION=$(mvn -f pom.xml help:evaluate -Dexpression='project.version' -q -DforceStdout)" >> $GITHUB_OUTPUT
          fi
      - name: Print Maven POM project version
        run: echo "application version = ${{ env.APP_VERSION }}"
      # Project compilation
      - name: Compile Code Source
        run: mvn -B clean compile
      # Execution of unit tests
      - name: Run Unit Tests
        run: mvn -B test
      # Package application
      - name: Package Application
        run: mvn -B package -Dmaven.test.skip=true

      - name: List files in target directory after packaging
        run: |
          echo "Checking files in target/ after packaging:"
          ls -l target/

      # Upload artifact to repository
      - name: Upload Application Package
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}.jar
          path: ${{ github.workspace }}/target/${{ env.APP_NAME }}-${{ env.APP_VERSION }}.jar
          compression-level: 0
          overwrite: true
  docker:
    needs: maven
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ vars.APP_NAME }}
      APP_VERSION: ${{ needs.maven.outputs.APP_VERSION }}
      ARTIFACT_NAME: ${{ needs.maven.outputs.ARTIFACT_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Download Application Package
        uses: actions/download-artifact@master
        with:
          name: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}.jar
          path: target/
      - name: Verify downloaded artifact
        run: |
          echo "Contents of target directory:"
          ls -l target/
          echo "APP_NAME: ${{ env.APP_NAME }}"
          echo "APP_VERSION: ${{ env.APP_VERSION }}"
      # Prepare docker build with buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
        with:
          driver: docker
      # Docker login
      - name: Login to Docker Hub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # Docker build and push
      - name: Build and push
        uses: docker/build-push-action@master
        with:
          context: ${{ github.workspace }}
          file: Dockerfile
          push: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' }}
          tags: docker.io/douniabed/${{ env.APP_NAME }}:${{ env.APP_VERSION }}
          build-args: |
            APP_NAME=${{ env.APP_NAME }}
            APP_VERSION=${{ env.APP_VERSION }}
  release:
    # This job depends on the successful completion of the 'maven' and 'docker' jobs
    needs: [maven, docker]
    # This job only runs on the 'main' branch
    if: github.ref == 'refs/heads/main'
    # The job runs on the latest version of Ubuntu
    runs-on: ubuntu-latest
    # Environment variables used throughout the job
    env:
      APP_NAME: ${{ vars.APP_NAME }}
      APP_VERSION: ${{ needs.maven.outputs.APP_VERSION }}
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      # Set up Java environment
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      # Configure Git with GitHub Actions bot details
      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      # Download the built artifact from the 'maven' job
      - name: Download artifact
        uses: actions/download-artifact@master
        with:
          name: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}.jar
          path: target/

      # Create a GitHub release with the built artifact
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          RELEASE_VERSION="${{ env.APP_VERSION }}"
          DOCKER_IMAGE_URL="docker.io/douniabed/${{ env.APP_NAME }}:${{ env.APP_VERSION }}"
          RELEASE_NOTES="${{ env.APP_NAME }} release v${RELEASE_VERSION}

          Docker image: \`${DOCKER_IMAGE_URL}\`
          Commit: ${COMMIT_SHA}"

          gh release create v${RELEASE_VERSION} target/${{ env.APP_NAME }}-${{ env.APP_VERSION }}.jar \
            --title "v${RELEASE_VERSION}" \
            --notes "${RELEASE_NOTES}" \
            --target ${{ github.ref_name }}

      # Increment the version number and create a pull request for the next development cycle
      - name: Increment version and create PR
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          BRANCH_NAME="bump-version-$(date +%Y%m%d%H%M%S)"
          git checkout -b $BRANCH_NAME

          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          mvn versions:set -DnewVersion=${NEW_VERSION}-SNAPSHOT

          git add pom.xml
          git commit -m "Increment version to ${NEW_VERSION}-SNAPSHOT [skip ci]"
          git push origin $BRANCH_NAME

          gh pr create --base dev --head $BRANCH_NAME \
            --title "Bump version to ${NEW_VERSION}-SNAPSHOT" \
            --body "Automated version bump after release ${{ env.APP_VERSION }}"

          echo "Pull request created successfully. Please review and merge manually."

      # Trigger a deployment in the docker-a-deux-pas repository after a successful workflow run.
      # This dispatches a 'new-release' event with the app and version information to initiate the deployment process.
      - name: Trigger deployment
        if: success()
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          repository: a-deux-pas/docker-a-deux-pas
          event-type: new-release
          client-payload: '{"app": "back-end", "version": "${{ env.APP_VERSION }}"}'
